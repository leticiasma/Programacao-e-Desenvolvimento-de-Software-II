O objetivo desta atividade é praticar os conceitos vistos sobre programação defensiva. Esta é uma forma de design protetivo destinado a garantir o funcionamento contínuo de um software sob circunstâncias não previstas. Um conceito comum é que se temos “garbage in" certamente teremos "garbage out”, ou seja, se a entrada de um método não está de acordo com o esperado certamente teremos uma saída que também não condiz com o esperado.

O problema a ser tratado consiste na implementação de um programa que calcula o F1-score de um determinado modelo. Essa é uma métrica frequentemente utilizada no cenário de computação e é obtida pela média harmônica entre precisão e revocação de um modelo. A precisão  é a fração de instâncias recuperadas que são relevantes, enquanto revocação é a fração de instâncias relevantes que são recuperadas. A figura ilustra estes conceitos.

Seu programa receberá 5 valores na forma de strings: a quantidade de verdadeiros positivos, verdadeiros negativos, falsos positivos, falsos negativos e o total de observações. Ele deverá então convertê-los para inteiros, calcular os valores de precisão e revocação e então retornar o F1-score para o conjunto de dados apresentados. Como critério extra, seu programa deve ser robusto o suficiente para lidar com possíveis situações inesperadas. Você deve implementar barricadas na forma de asserts de tal forma a garantir a validade das entradas e que as pré-condições e pós-condições de métodos chave sejam respeitadas. 

Os arquivos main e utils já foram fornecidos e podem ser baixados aqui: main.cpp e utils.hpp. Sua tarefa é implementar os métodos da classe F1CALC, que são responsáveis por realizar as operações descritas. Em particular, você deverá implementar os métodos:

F1CALC::processaEntradas(): recebe cinco strings e as processa para o formato de inteiros. Deve também inspecionar se as entradas possuem um formato válido.
F1CALC::calculaPresRecall() recebe 5 inteiros e calcula os valores de precisão e revocação. Deve também verificar se os 5 inteiros respeitam as condições básicas para o cálculo de precisão e revocação (Pre-condição) e se os valores obtidos são apropriados para o cálculo de F1 (Pós-condição). Cabe a você identificar quais são essas condições a partir das fórmulas relatadas. Esse método acaba atuando como barricada garantindo que os dados que chegam ao cálculo de F1 estão limpos.
F1CALC::calculaF1() recebe 2 números de ponto flutuante e finalmente calcula o F1.
O assert padrão da biblioteca <cassert> não permite a encorporação de mensagens auxiliares e imprime a linha de código onde ele foi levantado. No cenário de produção isso não seria um problema mas para o VPL isso se torna uma dificuldade para realizar a correção das atividades.  Para remediar isso, foi criado um assert personalizado, ASSERT, que pode ser encontrado no arquivo utils.hpp e recebe uma condição de teste e uma mensagem de erro, como no exemplo a seguir:

ASSERT(2+2==5,"Expressao obviamente falsa!");

As mensagens de erro que devem ser utilizadas pelo seu programa, quando adequadas, são:

Input validation failed
Pre-condition failed
Post-condition failed